<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2019 OnGres, Inc.
  ~ SPDX-License-Identifier: AGPL-3.0-or-later
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>io.stackgres</groupId>
    <artifactId>stackgres-parent</artifactId>
    <version>1.16.3</version>
  </parent>

  <artifactId>stackgres-jobs</artifactId>
  <packaging>jar</packaging>
  <name>StackGres Jobs</name>

  <dependencies>
    <dependency>
      <groupId>io.stackgres</groupId>
      <artifactId>stackgres-common</artifactId>
      <version>${project.version}</version>
      <exclusions>
        <exclusion>
          <groupId>io.quarkus</groupId>
          <artifactId>quarkus-resteasy-jackson</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-vertx-http</artifactId>
    </dependency>
    <dependency>
      <groupId>io.smallrye.reactive</groupId>
      <artifactId>smallrye-mutiny-vertx-web-client</artifactId>
    </dependency>
    <dependency>
      <groupId>com.github.java-json-tools</groupId>
      <artifactId>json-patch</artifactId>
      <version>1.13</version>
    </dependency>

    <dependency>
      <groupId>io.stackgres</groupId>
      <artifactId>stackgres-test-util</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.stackgres</groupId>
      <artifactId>stackgres-common</artifactId>
      <version>${project.version}</version>
      <classifier>tests</classifier>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-junit5</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-junit5-mockito</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-junit5</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>stackgres-jobs</finalName>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
      <resource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>io.quarkus.platform</groupId>
        <artifactId>quarkus-maven-plugin</artifactId>
        <version>${quarkus.version}</version>
        <extensions>true</extensions>
        <executions>
          <execution>
            <goals>
              <goal>build</goal>
              <goal>generate-code</goal>
              <goal>generate-code-tests</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>safer</id>
    </profile>
    <profile>
      <id>native</id>
      <activation>
        <property>
          <name>native</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>${surefire-plugin.version}</version>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
                <configuration>
                  <systemPropertyVariables>
                    <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>
                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                    <maven.home>${maven.home}</maven.home>
                  </systemPropertyVariables>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <properties>
        <quarkus.native.enabled>true</quarkus.native.enabled>
        <quarkus.package.jar.enabled>false</quarkus.package.jar.enabled>
      </properties>
    </profile>
    <profile>
      <id>build-image-jvm</id>
      <properties>
        <docker.removeVolumes>true</docker.removeVolumes>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>build-image</id>
                <phase>package</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>build</goal>
                  <goal>start</goal>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <containerNamePattern>%a</containerNamePattern>
                  <images>
                    <image>
                      <alias>ongres-jvm-builder</alias>
                      <name>ongres-jvm-builder</name>
                      <build>
                        <cleanup>remove</cleanup>
                        <from>${docker.image}</from>
                        <assembly>
                          <targetDir>/jobs</targetDir>
                          <inline>
                            <fileSets>
                              <fileSet>
                                <directory>${project.basedir}</directory>
                                <outputDirectory>/</outputDirectory>
                                <excludes>
                                  <exclude>target/docker/**</exclude>
                                </excludes>
                              </fileSet>
                            </fileSets>
                          </inline>
                        </assembly>
                      </build>
                      <run>
                        <privileged>true</privileged>
                        <workingDir>/</workingDir>
                        <entrypoint>
                          <arg>/bin/sh</arg>
                          <arg>-ex</arg>
                          <arg>/jobs/src/main/docker/build-image-jvm.sh</arg>
                        </entrypoint>
                        <wait>
                          <time>600000</time>
                          <exit>0</exit>
                        </wait>
                        <log>
                          <prefix>image-builder|</prefix>
                          <date>default</date>
                        </log>
                        <env>
                          <JOBS_IMAGE_NAME>${env.JOBS_IMAGE_NAME}</JOBS_IMAGE_NAME>
                          <DOCKER_HOST>${env.DOCKER_HOST}</DOCKER_HOST>
                        </env>
                        <volumes>
                          <bind>
                            <volume>/var/lib/containers</volume>
                            <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                          </bind>
                        </volumes>
                      </run>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>build-image-native</id>
      <properties>
        <docker.removeVolumes>true</docker.removeVolumes>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>build-image</id>
                <phase>package</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>build</goal>
                  <goal>start</goal>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <containerNamePattern>%a</containerNamePattern>
                  <images>
                    <image>
                      <alias>jobs-native-builder</alias>
                      <name>jobs-native-builder</name>
                      <build>
                        <cleanup>remove</cleanup>
                        <from>${docker.image}</from>
                        <assembly>
                          <targetDir>/jobs</targetDir>
                          <inline>
                            <fileSets>
                              <fileSet>
                                <directory>${project.basedir}</directory>
                                <outputDirectory>/</outputDirectory>
                                <excludes>
                                  <exclude>target/docker/**</exclude>
                                </excludes>
                              </fileSet>
                            </fileSets>
                          </inline>
                        </assembly>
                      </build>
                      <run>
                        <privileged>true</privileged>
                        <workingDir>/</workingDir>
                        <entrypoint>
                          <arg>/bin/sh</arg>
                          <arg>-ex</arg>
                          <arg>/jobs/src/main/docker/build-image-native.sh</arg>
                        </entrypoint>
                        <wait>
                          <time>600000</time>
                          <exit>0</exit>
                        </wait>
                        <log>
                          <prefix>image-builder|</prefix>
                          <date>default</date>
                        </log>
                        <env>
                          <JOBS_IMAGE_NAME>${env.JOBS_IMAGE_NAME}</JOBS_IMAGE_NAME>
                          <DOCKER_HOST>${env.DOCKER_HOST}</DOCKER_HOST>
                        </env>
                        <volumes>
                          <bind>
                            <volume>/var/lib/containers</volume>
                            <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                          </bind>
                        </volumes>
                      </run>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>kind-load-image-jvm</id>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>kind-load-image</id>
                <phase>package</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>start</goal>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <containerNamePattern>%a</containerNamePattern>
                  <images>
                    <image>
                      <alias>kind-load</alias>
                      <name>${ci.image}</name>
                      <run>
                        <entrypoint>
                          <arg>/bin/sh</arg>
                          <arg>-exc</arg>
                          <arg>
                            JOBS_IMAGE_NAME="${JOBS_IMAGE_NAME:-"stackgres/jobs:main-jvm"}"
                            CONTAINER_NAME="$(docker inspect -f
                            '{{.Name}}'
                            "$(hostname)"|cut -d '/' -f 2|sed 's/^kind-load/kind/')"
                            kind load docker-image --name
                            "$CONTAINER_NAME"
                            "$JOBS_IMAGE_NAME" || true
                          </arg>
                        </entrypoint>
                        <wait>
                          <time>300000</time>
                          <exit>0</exit>
                        </wait>
                        <log>
                          <prefix>kind-load|</prefix>
                          <date>default</date>
                        </log>
                        <env>
                          <JOBS_IMAGE_NAME>${env.JOBS_IMAGE_NAME}</JOBS_IMAGE_NAME>
                          <DOCKER_HOST>${env.DOCKER_HOST}</DOCKER_HOST>
                        </env>
                        <volumes>
                          <bind>
                            <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                            <volume>/var/lib/docker:/var/lib/docker:ro</volume>
                          </bind>
                        </volumes>
                      </run>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>kind-load-image-native</id>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>kind-load-image</id>
                <phase>package</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>start</goal>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <containerNamePattern>%a</containerNamePattern>
                  <images>
                    <image>
                      <alias>kind-load</alias>
                      <name>${ci.image}</name>
                      <run>
                        <entrypoint>
                          <arg>/bin/sh</arg>
                          <arg>-exc</arg>
                          <arg>
                            JOBS_IMAGE_NAME="${JOBS_IMAGE_NAME:-"stackgres/jobs:main"}"
                            CONTAINER_NAME="$(docker inspect -f
                            '{{.Name}}'
                            "$(hostname)"|cut -d '/' -f 2|sed 's/^kind-load/kind/')"
                            kind load docker-image --name
                            "$CONTAINER_NAME"
                            "$JOBS_IMAGE_NAME" || true
                          </arg>
                        </entrypoint>
                        <wait>
                          <time>300000</time>
                          <exit>0</exit>
                        </wait>
                        <log>
                          <prefix>kind-load|</prefix>
                          <date>default</date>
                        </log>
                        <env>
                          <JOBS_IMAGE_NAME>${env.JOBS_IMAGE_NAME}</JOBS_IMAGE_NAME>
                          <DOCKER_HOST>${env.DOCKER_HOST}</DOCKER_HOST>
                        </env>
                        <volumes>
                          <bind>
                            <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                            <volume>/var/lib/docker:/var/lib/docker:ro</volume>
                          </bind>
                        </volumes>
                      </run>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
